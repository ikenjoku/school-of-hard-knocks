{"version":3,"sources":["../server/student.js"],"names":["validStudentStatus","Novice","Fair","Good","Pro","Sensei","studentFieldType","entryDate","name","scoreCard","status","favQuote","cleanupStudent","student","cleanedUpStudent","Object","keys","forEach","field","validateStudent","errors","push","length","join","convertStudent","Date"],"mappings":";;;;;AAAA,MAAMA,qBAAqB;AACvBC,YAAQ,IADe;AAEvBC,UAAM,IAFiB;AAGvBC,UAAM,IAHiB;AAIvBC,SAAK,IAJkB;AAKvBC,YAAQ;AALe,CAA3B;;AAQA,MAAMC,mBAAmB;AACrBC,eAAW,UADU;AAErBC,UAAM,UAFe;AAGrBC,eAAW,UAHU;AAIrBC,YAAQ,UAJa;AAKrBC,cAAU;AALW,CAAzB;;AAQA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC7B,UAAMC,mBAAmB,EAAzB;AACAC,WAAOC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6BC,SAAS;AAClC,YAAIZ,iBAAiBY,KAAjB,CAAJ,EAA6BJ,iBAAiBI,KAAjB,IAA0BL,QAAQK,KAAR,CAA1B;AAChC,KAFD;AAGA,WAAOJ,gBAAP;AACH;;AAED,SAASK,eAAT,CAAyBN,OAAzB,EAAkC;AAC9B,UAAMO,SAAS,EAAf;AACAL,WAAOC,IAAP,CAAYV,gBAAZ,EAA8BW,OAA9B,CAAsCC,SAAS;AAC3C,YAAIZ,iBAAiBY,KAAjB,MAA4B,UAA5B,IAA0C,CAACL,QAAQK,KAAR,CAA/C,EAA+D;AAC3DE,mBAAOC,IAAP,CAAa,4BAA2BH,KAAM,EAA9C;AACH;AACJ,KAJD;;AAMA,QAAI,CAAClB,mBAAmBa,QAAQH,MAA3B,CAAL,EAAyC;AACrCU,eAAOC,IAAP,CAAa,GAAER,QAAQH,MAAO,yBAA9B;AACH;AACD,WAAQU,OAAOE,MAAP,GAAgBF,OAAOG,IAAP,CAAY,IAAZ,CAAhB,GAAoC,IAA5C;AACH;;AAED,SAASC,cAAT,CAAwBX,OAAxB,EAAiC;AAC7B,QAAIA,QAAQN,SAAZ,EAAuBM,QAAQN,SAAR,GAAoB,IAAIkB,IAAJ,CAASZ,QAAQN,SAAjB,CAApB;AACvB,WAAOK,eAAeC,OAAf,CAAP;AACH;;kBAEc;AACXM,mBADW;AAEXP,kBAFW;AAGXY;AAHW,C","file":"student.js","sourcesContent":["const validStudentStatus = {\r\n    Novice: true,\r\n    Fair: true,\r\n    Good: true,\r\n    Pro: true,\r\n    Sensei: true,\r\n};\r\n\r\nconst studentFieldType = {\r\n    entryDate: \"required\",\r\n    name: \"required\",\r\n    scoreCard: \"optional\",\r\n    status: \"optional\",\r\n    favQuote: \"required\"\r\n}\r\n\r\nfunction cleanupStudent(student) {\r\n    const cleanedUpStudent = {};\r\n    Object.keys(student).forEach(field => {\r\n        if (studentFieldType[field]) cleanedUpStudent[field] = student[field];\r\n    });\r\n    return cleanedUpStudent;\r\n}\r\n\r\nfunction validateStudent(student) {\r\n    const errors = [];\r\n    Object.keys(studentFieldType).forEach(field => {\r\n        if (studentFieldType[field] === 'required' && !student[field]) {\r\n            errors.push(`Missing mandatory field: ${field}`)\r\n        }\r\n    });\r\n\r\n    if (!validStudentStatus[student.status]) {\r\n        errors.push(`${student.status} is not a valid status.`);\r\n    }\r\n    return (errors.length ? errors.join('; ') : null);\r\n}\r\n\r\nfunction convertStudent(student) {\r\n    if (student.entryDate) student.entryDate = new Date(student.entryDate);\r\n    return cleanupStudent(student);\r\n}\r\n\r\nexport default {\r\n    validateStudent,\r\n    cleanupStudent,\r\n    convertStudent,\r\n};"]}